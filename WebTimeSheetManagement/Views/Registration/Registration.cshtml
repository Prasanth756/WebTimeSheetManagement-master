@model WebTimeSheetManagement.Models.Registration
@{
    Layout = "~/Views/Shared/_LayoutSuperAdmin.cshtml";
}

<h4 class="page-header">Create User</h4>

<div class="panel panel-default">
    <div class="panel-heading">Create User</div>
    <div class="panel-body">

        @if (TempData["MessageRegistration"] != null)
        {
            <p class="alert alert-success" id="successMessage">@TempData["MessageRegistration"]</p>
        }

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

    <div class="row">
        <div class="col-lg-4">
            @Html.LabelFor(model => model.EmployeeID, htmlAttributes: new { @class = "control-label manadatory" })
            @Html.TextBoxFor(model => model.EmployeeID, new { @class = "form-control", @readonly = "readonly" })
            @*@Html.TextBoxFor(model => model.Name, new {id="txtName" })*@

            @Html.ValidationMessageFor(model => model.EmployeeID, "", new { @class = "text-danger" })
        </div>
        <div class="col-lg-4">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label manadatory" })
            @Html.TextBoxFor(model => model.Name, new { @class = "form-control", @maxlength = 40, @onkeypress = "return onlyspecchar(event);" })
            @*@Html.TextBoxFor(model => model.Name, new {id="txtName" })*@

            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
        <div class="col-lg-4">
            @Html.LabelFor(model => model.Mobileno, htmlAttributes: new { @class = "control-label manadatory" })
            @Html.TextBoxFor(model => model.Mobileno, new { @class = "form-control", @maxlength = 10, onkeypress = "return onlyNumberKey(event)", @onblur = "CheckMobileNumberExists(); " })
            @*@Html.TextBoxFor(model => model.Mobileno, new { id="txtnumber" })*@
            @Html.ValidationMessageFor(model => model.Mobileno, "", new { @class = "text-danger" })
        </div>
        <div class="col-lg-4">
            @Html.LabelFor(model => model.EmailID, htmlAttributes: new { @class = "control-label manadatory" })
            @Html.TextBoxFor(model => model.EmailID, new { @class = "form-control", @maxlength = 50 })
            @Html.ValidationMessageFor(model => model.EmailID, "", new { @class = "text-danger" })
        </div>
        <div class="col-lg-4">
            @Html.LabelFor(model => model.AadharNumber, htmlAttributes: new { @class = "control-label manadatory" })
            @Html.TextBoxFor(model => model.AadharNumber, new { @class = "form-control", @onblur = "CheckAadharExists();", @*onkeypress = "return blockSpecialChar(event)",*@ onkeypress = "return onlyNumberKey(event)", @maxlength = 12 })
            @Html.ValidationMessageFor(model => model.AadharNumber, "", new { @class = "text-danger" })
        </div>
        <div class="col-lg-4">
            @Html.LabelFor(model => model.PanCardNumber, htmlAttributes: new { @class = "control-label manadatory" })
            @Html.TextBoxFor(model => model.PanCardNumber, new { @class = "form-control", @maxlength = 10, @onkeyup = "this.value = this.value.toUpperCase()", @onblur = "CheckPanCardExists();", onkeypress = "return blockSpecialChar(event)", @style = "text-transform:uppercase" })
            @Html.ValidationMessageFor(model => model.PanCardNumber, "", new { @class = "text-danger"  })
        </div>
    </div>

            <div class="row">
                <div class="clearfix"></div>
                <div class="col-lg-4" style="margin-top:20px;">

                    @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label manadatory" })
                    @Html.RadioButtonFor(model => model.Gender, "M") @Html.Label("", "Male")
                    @Html.RadioButtonFor(model => model.Gender, "F") @Html.Label("", "Female")
                    <br />
                    @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                </div>
                <div class="col-lg-4">
                    @Html.LabelFor(model => model.Birthdate, htmlAttributes: new { @class = "control-label" })
                    @Html.TextBoxFor(model => model.Birthdate, new { @class = "form-control", @onkeypress = "alert('Choose Birthdate');" })
                    @Html.ValidationMessageFor(model => model.Birthdate, "", new { @class = "text-danger" })
                </div>
                <div class="col-lg-4">
                    @Html.LabelFor(model => model.DateofJoining, htmlAttributes: new { @class = "control-label" })
                    @Html.TextBoxFor(model => model.DateofJoining, new { @class = "form-control", @onkeypress = "alert('Choose DateofJoining');" })
                    @Html.ValidationMessageFor(model => model.DateofJoining, "", new { @class = "text-danger" })
                </div>

            </div>
            <div class="row">
                <div class="col-lg-4">
                    @Html.LabelFor(model => model.Username, htmlAttributes: new { @class = "control-label manadatory" })
                    @Html.TextBoxFor(model => model.Username, new { @class = "form-control", @maxlength = 20, @onkeypress = "return onlyspecchar(event);", @onblur = "CheckUsernameExists();" })
                    @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
                </div>
                <div class="col-lg-4">
                    @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label manadatory" })
                    @Html.PasswordFor(model => model.Password, new { @class = "form-control", @maxlength = 30, })
                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                </div>
                <div class="col-lg-4">
                    @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label manadatory" })
                    @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-4">
                    @Html.LabelFor(model => model.Designation, htmlAttributes: new { @class = "control-label manadatory" })
                    @Html.DropDownListFor(model => model.Designation, new SelectList(Model.ListofDesignations, "DesignationId", "EmpDesignation"), new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ListofDesignations)
                </div>
                <div class="col-md-4">
                    @Html.LabelFor(model => model.RoleID, htmlAttributes: new { @class = "control-label manadatory" })
                    @Html.DropDownListFor(model => model.RoleID, new SelectList(Model.ListofRoles, "RoleId", "Rolename"), new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ListofRoles)
                </div>
            </div>

            <br />
            <div class="row">
                <div class="col-lg-4">
                    <input type="submit" value="Create User" class="btn btn-success" />
                    @Html.ActionLink("Clear", "Registration", "Registration", null, new { @class = "btn btn-danger" })

                    @Html.ActionLink("Back To Users", "Users", "AllUsers", null, new { @class = "btn btn-info" })

                </div>
            </div>
        }

    </div>
</div>




<script type="text/javascript">

    $(document).ready(function ()
    {
        $("#Birthdate").datepicker
            ({
                dateFormat: "yy-mm-dd",
                changeMonth: true,
                changeYear: true,
                yearRange: "-100:+100",
                onSelect: function (date) {
                    var dob = new Date(date);
                    var today = new Date();

                    if (dob.getFullYear() + 18 < today.getFullYear()) {

                    }
                    else {
                        $("#Birthdate").val('');
                        alert("You are not eligible for Registration");
                    }
                }
            });

        //$("#DateofJoining").datepicker
        //   ({
        //       dateFormat: "yy-mm-dd",
        //       changeMonth: true,
        //       changeYear: true,
        //       yearRange: "-100:+100"

        //        //onSelect: function (data) {
        //        //    var doj = new Date(date);
        //        //    var today = new Date();

        //        //}

        //   });
        $("#DateofJoining").datepicker
            ({
                dateFormat: "yy-mm-dd",
                /*changeMonth: true,*/
                //changeYear: true,
                minDate: '-15d',
                maxDate: new Date
            });


    });

    function OnlyNumeric(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode
        if ((charCode < 48 || charCode > 57)) {
            if (charCode == 8 || charCode == 46 || charCode == 0) {
                return true;
            }
            else {
                return false;
            }
        }
    }


    function CheckMobileNumberExists() {
        var url = '@Url.Content("~/")' + "Registration/CheckMobileNumberExists";
        var source = "#Mobileno";
        $.post(url, { Mobileno: $(source).val() }, function (data) {
            if (data) {
                $(source).val('');
                alert("Mobileno Already Used try unique one!");
            }
            else
            {

            }
        });
    }

    function CheckAadharExists() {
        var url = '@Url.Content("~/")' + "Registration/CheckAadharExists";
        var source = "#AadharNumber";
        $.post(url, { AadharNumber: $(source).val() }, function (data) {
            if (data) {
                $(source).val('');
                alert("AadharNumber Already Used try unique one!");
            }
            else
            {

            }
        });

    }

    function CheckPanCardExists() {
        var url = '@Url.Content("~/")' + "Registration/CheckPanCardExists";
        var source = "#PanCardNumber";
         $.post(url, { PanCardNumber: $(source).val() }, function (data) {
            if (data) {
                $(source).val('');
                alert("PanCardNumber Already Used try unique one!");
            }
            else
            {

            }
        });
    }

    function CheckUsernameExists() {
        var url = '@Url.Content("~/")' + "Registration/CheckUserNameExists";
        var source = "#Username";
        $.post(url, { Username: $(source).val() }, function (data) {
            if (data) {
                $(source).val('');
                alert("Username Already Used try unique one!");
            }
            else
            {

            }
        });
    }

    function onlyspecchar(evt)
    {
        var charCode = (evt.which) ? evt.which : evt.keyCode
        var txt = String.fromCharCode(charCode)
        if ((txt.match(/^[a-zA-Z\b. ]+$/)) || (txt.match(/^[0-9]+$/)) || (charCode == 64) || (charCode == 45) || (charCode == 46) || (charCode == 95) || (charCode == 41))
        {
            return true;
        }
        return false;
    }
    function onlyNumberKey(evt) {

        // Only ASCII character in that range allowed
        var ASCIICode = (evt.which) ? evt.which : evt.keyCode
        if (ASCIICode > 31 && (ASCIICode < 48 || ASCIICode > 57))
            return false;
        return true;
    }
    function blockSpecialChar(e) {
        var k;
        document.all ? k = e.keyCode : k = e.which;
        return ((k > 64 && k < 91) || (k > 96 && k < 123) || k == 8 || k == 32 || (k >= 48 && k <= 57));
    }

    $(function () {
        var txt = $("input#PanCardNumber");
        var func = function (e) {
            if (e.keyCode === 32) {
                txt.val(txt.val().replace(/\s/g, ''));
            }
        }
        txt.keyup(func).blur(func);
    });




</script>
